// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XMX.WMS.EntityFrameworkCore;

namespace XMX.WMS.Migrations
{
    [DbContext(typeof(WMSDbContext))]
    [Migration("20200424061959_addwarningtype")]
    partial class addwarningtype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("XMX.WMS.Alarm.Alarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("alarm_name");

                    b.Property<int>("alarm_value");

                    b.Property<string>("area_remark");

                    b.Property<Guid?>("company_id");

                    b.Property<Guid?>("goods_id");

                    b.Property<string>("impbody_bill_bar");

                    b.Property<Guid?>("inventory_id");

                    b.Property<Guid?>("strategy_id");

                    b.Property<int>("thresholdz_value");

                    b.Property<string>("warning_type");

                    b.HasKey("Id");

                    b.HasIndex("company_id");

                    b.HasIndex("goods_id");

                    b.HasIndex("inventory_id");

                    b.HasIndex("strategy_id");

                    b.ToTable("Alarm");
                });

            modelBuilder.Entity("XMX.WMS.AreaInfo.AreaInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("area_code");

                    b.Property<int>("area_is_enable");

                    b.Property<string>("area_name");

                    b.Property<string>("area_remark");

                    b.Property<Guid?>("area_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("area_warehouse_id");

                    b.ToTable("AreaInfo");
                });

            modelBuilder.Entity("XMX.WMS.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("IsEnable");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Remark");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("XMX.WMS.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<int>("IsEnable");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("LoginId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("Remark");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("XMX.WMS.BillInfo.BillInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("bill_company_id");

                    b.Property<int>("bill_is_enable");

                    b.Property<string>("bill_name");

                    b.Property<string>("bill_remark");

                    b.Property<Guid?>("bill_rule_id");

                    b.Property<int>("bill_type");

                    b.HasKey("Id");

                    b.HasIndex("bill_company_id");

                    b.HasIndex("bill_rule_id");

                    b.ToTable("BillInfo");
                });

            modelBuilder.Entity("XMX.WMS.CompanyInfo.CompanyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressDetail");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("IsEnable");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ManagerName");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("Remark");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("XMX.WMS.CustomInfo.CustomInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("custom_address");

                    b.Property<string>("custom_area");

                    b.Property<string>("custom_city");

                    b.Property<string>("custom_code");

                    b.Property<Guid?>("custom_company_id");

                    b.Property<string>("custom_fax");

                    b.Property<string>("custom_fid");

                    b.Property<int>("custom_is_enable");

                    b.Property<string>("custom_linkman");

                    b.Property<string>("custom_name");

                    b.Property<string>("custom_phone");

                    b.Property<string>("custom_province");

                    b.Property<string>("custom_remark");

                    b.Property<string>("custom_short_name");

                    b.Property<string>("custom_telephone");

                    b.Property<string>("custom_town");

                    b.Property<Guid?>("custom_type_id");

                    b.HasKey("Id");

                    b.HasIndex("custom_company_id");

                    b.HasIndex("custom_type_id");

                    b.ToTable("CustomInfo");
                });

            modelBuilder.Entity("XMX.WMS.CustomTypeInfo.CustomTypeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("customtype_code");

                    b.Property<Guid?>("customtype_company_id");

                    b.Property<int>("customtype_is_enable");

                    b.Property<string>("customtype_name");

                    b.Property<string>("customtype_remark");

                    b.HasKey("Id");

                    b.HasIndex("customtype_company_id");

                    b.ToTable("CustomTypeInfo");
                });

            modelBuilder.Entity("XMX.WMS.DepartmentInfo.DepartmentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DepartNo");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("IsEnable");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ManagerName");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentInfo");
                });

            modelBuilder.Entity("XMX.WMS.EncodingRule.EncodingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("code_code");

                    b.Property<Guid?>("code_company_id");

                    b.Property<int>("code_date_type");

                    b.Property<int>("code_is_enable");

                    b.Property<string>("code_name");

                    b.Property<string>("code_prefix");

                    b.Property<int>("code_record");

                    b.Property<int>("code_suffix_length");

                    b.HasKey("Id");

                    b.HasIndex("code_company_id");

                    b.ToTable("EncodingRule");
                });

            modelBuilder.Entity("XMX.WMS.Equipment.EquipmentLogInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("equipment_code");

                    b.Property<int>("equipment_execution_state");

                    b.Property<string>("equipment_log_content");

                    b.Property<string>("equipment_log_remark");

                    b.Property<int>("equipment_log_type");

                    b.Property<string>("equipment_name");

                    b.Property<int>("equipment_type");

                    b.Property<string>("opt_user_name");

                    b.HasKey("Id");

                    b.ToTable("EquipmentLogInfo");
                });

            modelBuilder.Entity("XMX.WMS.Equipment.RGVInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("alarm_state");

                    b.Property<int>("online_state");

                    b.Property<string>("rgv_code");

                    b.Property<string>("rgv_name");

                    b.Property<string>("rgv_remark");

                    b.Property<Guid?>("rgv_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("rgv_warehouse_id");

                    b.ToTable("RGVInfo");
                });

            modelBuilder.Entity("XMX.WMS.Equipment.StackerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("alarm_state");

                    b.Property<int>("online_state");

                    b.Property<string>("stacker_code");

                    b.Property<string>("stacker_name");

                    b.Property<string>("stacker_remark");

                    b.Property<Guid?>("stacker_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("stacker_warehouse_id");

                    b.ToTable("StackerInfo");
                });

            modelBuilder.Entity("XMX.WMS.ExportBillbody.ExportBillbody", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("expbody_audit_datetime");

                    b.Property<int>("expbody_audit_flag");

                    b.Property<string>("expbody_audit_uid");

                    b.Property<string>("expbody_batch_no");

                    b.Property<string>("expbody_bill_bar");

                    b.Property<decimal>("expbody_binding_quantity");

                    b.Property<Guid?>("expbody_company_id");

                    b.Property<int>("expbody_execute_flag");

                    b.Property<string>("expbody_external_listid");

                    b.Property<decimal>("expbody_fulfill_quantity");

                    b.Property<Guid?>("expbody_goods_id");

                    b.Property<Guid?>("expbody_imphead_id");

                    b.Property<int>("expbody_is_enable");

                    b.Property<string>("expbody_list_id");

                    b.Property<string>("expbody_lots_no");

                    b.Property<DateTime>("expbody_noused_datetime");

                    b.Property<int>("expbody_noused_flag");

                    b.Property<string>("expbody_noused_uid");

                    b.Property<decimal>("expbody_plan_quantity");

                    b.Property<DateTime>("expbody_product_date");

                    b.Property<string>("expbody_product_lineid");

                    b.Property<Guid?>("expbody_quality_status");

                    b.Property<DateTime>("expbody_recheck_date");

                    b.Property<string>("expbody_remark");

                    b.Property<DateTime>("expbody_upload_datetime");

                    b.Property<int>("expbody_upload_flag");

                    b.Property<DateTime>("expbody_vaildate_date");

                    b.HasKey("Id");

                    b.HasIndex("expbody_company_id");

                    b.HasIndex("expbody_goods_id");

                    b.HasIndex("expbody_imphead_id");

                    b.HasIndex("expbody_quality_status");

                    b.ToTable("ExportBillbody");
                });

            modelBuilder.Entity("XMX.WMS.ExportBillhead.ExportBillhead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("exphead_audit_flag");

                    b.Property<Guid?>("exphead_bill_id");

                    b.Property<string>("exphead_code");

                    b.Property<Guid?>("exphead_company_id");

                    b.Property<Guid?>("exphead_custom_id");

                    b.Property<DateTime>("exphead_date");

                    b.Property<int>("exphead_execute_flag");

                    b.Property<string>("exphead_external_code");

                    b.Property<string>("exphead_external_id");

                    b.Property<int>("exphead_is_enable");

                    b.Property<int>("exphead_noused_flag");

                    b.Property<string>("exphead_remark");

                    b.Property<int>("exphead_upload_flag");

                    b.Property<Guid?>("exphead_warehouse_id");

                    b.Property<string>("exphead_wave_no");

                    b.HasKey("Id");

                    b.HasIndex("exphead_bill_id");

                    b.HasIndex("exphead_company_id");

                    b.HasIndex("exphead_custom_id");

                    b.HasIndex("exphead_warehouse_id");

                    b.ToTable("ExportBillhead");
                });

            modelBuilder.Entity("XMX.WMS.ExportConfirm.ExportConfirm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("confirm_batch_no");

                    b.Property<string>("confirm_bill_bar");

                    b.Property<string>("confirm_box_code");

                    b.Property<Guid?>("confirm_company_id");

                    b.Property<Guid?>("confirm_goods_id");

                    b.Property<int>("confirm_is_enable");

                    b.Property<string>("confirm_lots_no");

                    b.Property<Guid?>("confirm_platform_id");

                    b.Property<Guid?>("confirm_port_id");

                    b.Property<DateTime>("confirm_product_date");

                    b.Property<string>("confirm_product_lineid");

                    b.Property<Guid?>("confirm_quality_status");

                    b.Property<decimal>("confirm_quantity");

                    b.Property<DateTime>("confirm_recheck_date");

                    b.Property<string>("confirm_remark");

                    b.Property<Guid?>("confirm_slot_code");

                    b.Property<string>("confirm_stock_code");

                    b.Property<DateTime>("confirm_upload_datetime");

                    b.Property<string>("confirm_upload_flag");

                    b.Property<DateTime>("confirm_vaildate_date");

                    b.Property<Guid?>("confirm_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("confirm_company_id");

                    b.HasIndex("confirm_goods_id");

                    b.HasIndex("confirm_platform_id");

                    b.HasIndex("confirm_port_id");

                    b.HasIndex("confirm_quality_status");

                    b.HasIndex("confirm_slot_code");

                    b.HasIndex("confirm_warehouse_id");

                    b.ToTable("ExportConfirm");
                });

            modelBuilder.Entity("XMX.WMS.ExportOrder.ExportOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("exporder_batch_no");

                    b.Property<string>("exporder_bill_bar");

                    b.Property<Guid?>("exporder_body_id");

                    b.Property<string>("exporder_box_code");

                    b.Property<Guid?>("exporder_company_id");

                    b.Property<int>("exporder_execute_flag");

                    b.Property<Guid?>("exporder_goods_id");

                    b.Property<int>("exporder_is_enable");

                    b.Property<string>("exporder_lots_no");

                    b.Property<DateTime>("exporder_noused_datetime");

                    b.Property<int>("exporder_noused_flag");

                    b.Property<string>("exporder_noused_uid");

                    b.Property<Guid?>("exporder_platform_id");

                    b.Property<Guid?>("exporder_port_id");

                    b.Property<DateTime>("exporder_product_date");

                    b.Property<string>("exporder_product_lineid");

                    b.Property<Guid?>("exporder_quality_status");

                    b.Property<decimal>("exporder_quantity");

                    b.Property<DateTime>("exporder_recheck_date");

                    b.Property<string>("exporder_remark");

                    b.Property<Guid?>("exporder_slot_code");

                    b.Property<string>("exporder_stock_code");

                    b.Property<DateTime>("exporder_upload_datetime");

                    b.Property<int>("exporder_upload_flag");

                    b.Property<DateTime>("exporder_vaildate_date");

                    b.Property<Guid?>("exporder_warehouse_id");

                    b.Property<Guid?>("history_task_id");

                    b.Property<Guid?>("task_id");

                    b.HasKey("Id");

                    b.HasIndex("exporder_body_id");

                    b.HasIndex("exporder_company_id");

                    b.HasIndex("exporder_goods_id");

                    b.HasIndex("exporder_platform_id");

                    b.HasIndex("exporder_port_id");

                    b.HasIndex("exporder_quality_status");

                    b.HasIndex("exporder_slot_code");

                    b.HasIndex("exporder_warehouse_id");

                    b.HasIndex("history_task_id");

                    b.HasIndex("task_id");

                    b.ToTable("ExportOrder");
                });

            modelBuilder.Entity("XMX.WMS.ExportStock.ExportStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("expstock_batch_no");

                    b.Property<Guid?>("expstock_company_id");

                    b.Property<int>("expstock_execute_flag");

                    b.Property<Guid?>("expstock_goods_id");

                    b.Property<int>("expstock_is_enable");

                    b.Property<DateTime>("expstock_noused_datetime");

                    b.Property<int>("expstock_noused_flag");

                    b.Property<string>("expstock_noused_uid");

                    b.Property<Guid?>("expstock_platform_id");

                    b.Property<Guid?>("expstock_port_id");

                    b.Property<decimal>("expstock_quantity");

                    b.Property<string>("expstock_remark");

                    b.Property<Guid?>("expstock_slot_code");

                    b.Property<string>("expstock_stock_code");

                    b.Property<Guid?>("expstock_task_id");

                    b.Property<Guid?>("expstock_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("expstock_company_id");

                    b.HasIndex("expstock_goods_id");

                    b.HasIndex("expstock_platform_id");

                    b.HasIndex("expstock_port_id");

                    b.HasIndex("expstock_slot_code");

                    b.HasIndex("expstock_task_id");

                    b.HasIndex("expstock_warehouse_id");

                    b.ToTable("ExportStock");
                });

            modelBuilder.Entity("XMX.WMS.GoodsInfo.GoodsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("goods_ABC_class");

                    b.Property<Guid?>("goods_area_id");

                    b.Property<string>("goods_code");

                    b.Property<Guid?>("goods_company_id");

                    b.Property<string>("goods_describe");

                    b.Property<Guid?>("goods_distribution_id");

                    b.Property<string>("goods_en_name");

                    b.Property<int>("goods_expiry_date");

                    b.Property<string>("goods_external_id");

                    b.Property<string>("goods_factory");

                    b.Property<decimal?>("goods_height");

                    b.Property<int>("goods_is_enable");

                    b.Property<decimal?>("goods_large_qty");

                    b.Property<decimal?>("goods_length");

                    b.Property<decimal?>("goods_medium_qty");

                    b.Property<string>("goods_model");

                    b.Property<Guid?>("goods_monitor_id");

                    b.Property<string>("goods_name");

                    b.Property<Guid?>("goods_pack_id");

                    b.Property<string>("goods_picture");

                    b.Property<decimal?>("goods_price");

                    b.Property<int>("goods_recheck_date");

                    b.Property<string>("goods_short_name");

                    b.Property<decimal?>("goods_small_qty");

                    b.Property<string>("goods_standard");

                    b.Property<decimal?>("goods_stock_max");

                    b.Property<decimal?>("goods_stock_min");

                    b.Property<decimal?>("goods_stock_qty");

                    b.Property<int?>("goods_type");

                    b.Property<Guid?>("goods_unit");

                    b.Property<Guid?>("goods_unit2");

                    b.Property<Guid?>("goods_warehousing_id");

                    b.Property<decimal?>("goods_water_high");

                    b.Property<decimal?>("goods_water_low");

                    b.Property<decimal?>("goods_weight");

                    b.Property<decimal?>("goods_width");

                    b.HasKey("Id");

                    b.HasIndex("goods_area_id");

                    b.HasIndex("goods_company_id");

                    b.HasIndex("goods_distribution_id");

                    b.HasIndex("goods_monitor_id");

                    b.HasIndex("goods_pack_id");

                    b.HasIndex("goods_unit");

                    b.HasIndex("goods_unit2");

                    b.HasIndex("goods_warehousing_id");

                    b.ToTable("GoodsInfo");
                });

            modelBuilder.Entity("XMX.WMS.HistoryTaskMainInfo.HistoryTaskMainInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("exporder_batch_no");

                    b.Property<decimal>("exporder_quantity");

                    b.Property<Guid?>("main_company_id");

                    b.Property<int>("main_execute_flag");

                    b.Property<Guid?>("main_inslot_code");

                    b.Property<string>("main_malfunction");

                    b.Property<int>("main_manual_flag");

                    b.Property<int>("main_mode");

                    b.Property<string>("main_no");

                    b.Property<Guid?>("main_platform_id");

                    b.Property<Guid?>("main_port_id");

                    b.Property<Guid?>("main_port_id2");

                    b.Property<int>("main_priority");

                    b.Property<Guid?>("main_slot_code");

                    b.Property<string>("main_stock_code");

                    b.Property<Guid?>("material_id");

                    b.Property<string>("material_name");

                    b.HasKey("Id");

                    b.HasIndex("main_company_id");

                    b.HasIndex("main_inslot_code");

                    b.HasIndex("main_platform_id");

                    b.HasIndex("main_port_id");

                    b.HasIndex("main_port_id2");

                    b.HasIndex("main_slot_code");

                    b.ToTable("HistoryTaskMainInfo");
                });

            modelBuilder.Entity("XMX.WMS.ImportBillbody.ImportBillbody", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("imbody_recheck_date");

                    b.Property<DateTime>("impbody_audit_datetime");

                    b.Property<int>("impbody_audit_flag");

                    b.Property<string>("impbody_audit_uid");

                    b.Property<string>("impbody_batch_no");

                    b.Property<string>("impbody_bill_bar");

                    b.Property<int>("impbody_binding_quantity");

                    b.Property<Guid?>("impbody_company_id");

                    b.Property<int>("impbody_execute_flag");

                    b.Property<string>("impbody_external_listid");

                    b.Property<int>("impbody_fulfill_quantity");

                    b.Property<Guid?>("impbody_goods_id");

                    b.Property<Guid?>("impbody_imphead_id");

                    b.Property<int>("impbody_is_enable");

                    b.Property<string>("impbody_list_id");

                    b.Property<string>("impbody_lots_no");

                    b.Property<string>("impbody_noused_datetime");

                    b.Property<int>("impbody_noused_flag");

                    b.Property<string>("impbody_noused_uid");

                    b.Property<int>("impbody_plan_quantity");

                    b.Property<DateTime>("impbody_product_date");

                    b.Property<string>("impbody_product_lineid");

                    b.Property<Guid?>("impbody_quality_status");

                    b.Property<string>("impbody_remark");

                    b.Property<string>("impbody_stock_code");

                    b.Property<DateTime>("impbody_upload_datetime");

                    b.Property<int>("impbody_upload_flag");

                    b.Property<Guid?>("impbody_upload_quantity");

                    b.Property<DateTime>("impbody_vaildate_date");

                    b.Property<Guid?>("impbody_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("impbody_company_id");

                    b.HasIndex("impbody_goods_id");

                    b.HasIndex("impbody_imphead_id");

                    b.HasIndex("impbody_quality_status");

                    b.HasIndex("impbody_upload_quantity");

                    b.HasIndex("impbody_warehouse_id");

                    b.ToTable("ImportBillbody");
                });

            modelBuilder.Entity("XMX.WMS.ImportBillhead.ImportBillhead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("imphead_audit_flag");

                    b.Property<Guid?>("imphead_bill_id");

                    b.Property<string>("imphead_code");

                    b.Property<Guid?>("imphead_company_id");

                    b.Property<Guid?>("imphead_custom_id");

                    b.Property<DateTime>("imphead_date");

                    b.Property<int>("imphead_execute_flag");

                    b.Property<string>("imphead_external_code");

                    b.Property<string>("imphead_external_id");

                    b.Property<int>("imphead_is_enable");

                    b.Property<int>("imphead_noused_flag");

                    b.Property<string>("imphead_remark");

                    b.Property<int>("imphead_upload_flag");

                    b.Property<Guid?>("imphead_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("imphead_bill_id");

                    b.HasIndex("imphead_company_id");

                    b.HasIndex("imphead_custom_id");

                    b.HasIndex("imphead_warehouse_id");

                    b.ToTable("ImportBillhead");
                });

            modelBuilder.Entity("XMX.WMS.ImportOrder.ImportOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("history_task_id");

                    b.Property<string>("imporder_batch_no");

                    b.Property<string>("imporder_bill_bar");

                    b.Property<Guid?>("imporder_body_id");

                    b.Property<string>("imporder_box_code");

                    b.Property<Guid?>("imporder_company_id");

                    b.Property<int>("imporder_execute_flag");

                    b.Property<Guid?>("imporder_goods_id");

                    b.Property<int>("imporder_is_enable");

                    b.Property<string>("imporder_lots_no");

                    b.Property<DateTime>("imporder_noused_datetime");

                    b.Property<int>("imporder_noused_flag");

                    b.Property<string>("imporder_noused_uid");

                    b.Property<Guid?>("imporder_port_id");

                    b.Property<DateTime>("imporder_product_date");

                    b.Property<string>("imporder_product_lineid");

                    b.Property<Guid?>("imporder_quality_status");

                    b.Property<int>("imporder_quantity");

                    b.Property<DateTime>("imporder_recheck_date");

                    b.Property<string>("imporder_remark");

                    b.Property<Guid?>("imporder_slot_code");

                    b.Property<string>("imporder_stock_code");

                    b.Property<int>("imporder_stock_status");

                    b.Property<DateTime>("imporder_upload_datetime");

                    b.Property<string>("imporder_upload_flag");

                    b.Property<DateTime>("imporder_vaildate_date");

                    b.Property<Guid?>("imporder_warehouse_id");

                    b.Property<Guid?>("task_id");

                    b.HasKey("Id");

                    b.HasIndex("history_task_id");

                    b.HasIndex("imporder_body_id");

                    b.HasIndex("imporder_company_id");

                    b.HasIndex("imporder_goods_id");

                    b.HasIndex("imporder_port_id");

                    b.HasIndex("imporder_quality_status");

                    b.HasIndex("imporder_slot_code");

                    b.HasIndex("imporder_warehouse_id");

                    b.HasIndex("task_id");

                    b.ToTable("ImportOrder");
                });

            modelBuilder.Entity("XMX.WMS.ImportStock.ImportStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("impstock_batch_no");

                    b.Property<Guid?>("impstock_company_id");

                    b.Property<int>("impstock_execute_flag");

                    b.Property<Guid?>("impstock_goods_id");

                    b.Property<int>("impstock_is_enable");

                    b.Property<DateTime>("impstock_noused_datetime");

                    b.Property<int>("impstock_noused_flag");

                    b.Property<string>("impstock_noused_uid");

                    b.Property<Guid?>("impstock_port_id");

                    b.Property<int>("impstock_quantity");

                    b.Property<string>("impstock_remark");

                    b.Property<Guid?>("impstock_slot_code");

                    b.Property<string>("impstock_stock_code");

                    b.Property<Guid?>("impstock_warehouse_id");

                    b.Property<Guid?>("task_id");

                    b.HasKey("Id");

                    b.HasIndex("impstock_company_id");

                    b.HasIndex("impstock_goods_id");

                    b.HasIndex("impstock_port_id");

                    b.HasIndex("impstock_slot_code");

                    b.HasIndex("impstock_warehouse_id");

                    b.HasIndex("task_id");

                    b.ToTable("ImportStock");
                });

            modelBuilder.Entity("XMX.WMS.InventoryInfo.InventoryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("inventory_batch_no");

                    b.Property<string>("inventory_bill_bar");

                    b.Property<string>("inventory_box_code");

                    b.Property<Guid?>("inventory_company_id");

                    b.Property<DateTime>("inventory_date");

                    b.Property<DateTime>("inventory_datetime");

                    b.Property<Guid?>("inventory_goods_id");

                    b.Property<int>("inventory_is_enable");

                    b.Property<string>("inventory_lots_no");

                    b.Property<Guid?>("inventory_port_id");

                    b.Property<DateTime>("inventory_product_date");

                    b.Property<string>("inventory_product_lineid");

                    b.Property<Guid?>("inventory_quality_status");

                    b.Property<decimal>("inventory_quantity");

                    b.Property<DateTime>("inventory_recheck_date");

                    b.Property<string>("inventory_remark");

                    b.Property<Guid>("inventory_slot_code");

                    b.Property<int>("inventory_status");

                    b.Property<string>("inventory_stock_code");

                    b.Property<int>("inventory_stock_status");

                    b.Property<DateTime>("inventory_vaildate_date");

                    b.Property<Guid?>("inventory_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("inventory_company_id");

                    b.HasIndex("inventory_goods_id");

                    b.HasIndex("inventory_port_id");

                    b.HasIndex("inventory_quality_status");

                    b.HasIndex("inventory_slot_code");

                    b.HasIndex("inventory_warehouse_id");

                    b.ToTable("InventoryInfo");
                });

            modelBuilder.Entity("XMX.WMS.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("XMX.WMS.Operation.OperationLogInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("operation_modify_final_data");

                    b.Property<string>("operation_modify_pre_data");

                    b.Property<string>("operation_module_name");

                    b.Property<string>("operation_remark");

                    b.Property<string>("operation_search_content");

                    b.Property<string>("operation_type_name");

                    b.HasKey("Id");

                    b.ToTable("OperationLogInfo");
                });

            modelBuilder.Entity("XMX.WMS.PackInfo.PackInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("pack_code");

                    b.Property<Guid?>("pack_company_id");

                    b.Property<int>("pack_is_enable");

                    b.Property<string>("pack_name");

                    b.Property<string>("pack_picture");

                    b.Property<string>("pack_remark");

                    b.HasKey("Id");

                    b.HasIndex("pack_company_id");

                    b.ToTable("PackInfo");
                });

            modelBuilder.Entity("XMX.WMS.PlatFormInfo.PlatFormInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("platform_code");

                    b.Property<int>("platform_is_enable");

                    b.Property<string>("platform_name");

                    b.Property<string>("platform_remark");

                    b.Property<int>("platform_state");

                    b.Property<Guid?>("platform_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("platform_warehouse_id");

                    b.ToTable("PlatFormInfo");
                });

            modelBuilder.Entity("XMX.WMS.PortInfo.PortInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("port_code");

                    b.Property<int>("port_is_enable");

                    b.Property<string>("port_name");

                    b.Property<int>("port_type");

                    b.Property<Guid?>("port_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("port_warehouse_id");

                    b.ToTable("PortInfo");
                });

            modelBuilder.Entity("XMX.WMS.QualityCheck.QualityCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("bill_type");

                    b.Property<string>("check_batch_no");

                    b.Property<string>("check_bill");

                    b.Property<string>("check_goods_code");

                    b.Property<string>("check_goods_name");

                    b.Property<Guid?>("check_inventory_id");

                    b.Property<decimal>("check_num");

                    b.Property<int>("check_released");

                    b.Property<DateTime>("check_time");

                    b.Property<string>("checked_quality_status");

                    b.Property<Guid>("checked_quality_status_id");

                    b.Property<int>("exist_out_bill");

                    b.Property<Guid?>("inventory_warehouse_id");

                    b.Property<string>("origin_quality_status");

                    b.Property<string>("quality_check_export_code");

                    b.Property<string>("remark");

                    b.Property<decimal>("stock_num");

                    b.HasKey("Id");

                    b.HasIndex("check_inventory_id");

                    b.HasIndex("inventory_warehouse_id");

                    b.ToTable("QualityCheck");
                });

            modelBuilder.Entity("XMX.WMS.QualityCheckDetail.QualityCheckDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("check_bill_code");

                    b.Property<string>("inventory_batch_no");

                    b.Property<string>("inventory_box_code");

                    b.Property<Guid?>("inventory_goods_id");

                    b.Property<string>("inventory_lots_no");

                    b.Property<DateTime>("inventory_product_date");

                    b.Property<string>("inventory_product_lineid");

                    b.Property<decimal>("inventory_quantity");

                    b.Property<string>("inventory_slot_code");

                    b.Property<int>("inventory_status");

                    b.Property<string>("inventory_stock_code");

                    b.Property<int>("inventory_stock_status");

                    b.Property<Guid?>("quality_check_id");

                    b.Property<decimal>("stock_check_quantity");

                    b.HasKey("Id");

                    b.HasIndex("inventory_goods_id");

                    b.HasIndex("quality_check_id");

                    b.ToTable("QualityCheckDetail");
                });

            modelBuilder.Entity("XMX.WMS.QualityInfo.QualityInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("quality_color");

                    b.Property<Guid?>("quality_company_id");

                    b.Property<int>("quality_is_enable");

                    b.Property<string>("quality_name");

                    b.HasKey("Id");

                    b.HasIndex("quality_company_id");

                    b.ToTable("QualityInfo");
                });

            modelBuilder.Entity("XMX.WMS.QualityReleased.QualityReleased", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("quare_batch_no");

                    b.Property<string>("quare_goods_code");

                    b.Property<string>("quare_goods_name");

                    b.Property<Guid?>("quare_quality_id");

                    b.Property<string>("quare_stock_in_code");

                    b.HasKey("Id");

                    b.HasIndex("quare_quality_id");

                    b.ToTable("QualityReleased");
                });

            modelBuilder.Entity("XMX.WMS.RowInfo.RowInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("row_area_id");

                    b.Property<Guid?>("row_company_id");

                    b.Property<int>("row_end_column");

                    b.Property<int>("row_end_layer");

                    b.Property<int>("row_inout_type");

                    b.Property<int>("row_is_enable");

                    b.Property<int>("row_movealbe_status");

                    b.Property<string>("row_name");

                    b.Property<int>("row_no");

                    b.Property<int>("row_order");

                    b.Property<Guid?>("row_out_id");

                    b.Property<string>("row_remark");

                    b.Property<Guid?>("row_size_id");

                    b.Property<int>("row_start_column");

                    b.Property<string>("row_start_layer");

                    b.Property<Guid?>("row_tunnel_id");

                    b.Property<int>("row_type");

                    b.Property<Guid?>("row_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("row_area_id");

                    b.HasIndex("row_company_id");

                    b.HasIndex("row_out_id");

                    b.HasIndex("row_size_id");

                    b.HasIndex("row_tunnel_id");

                    b.HasIndex("row_warehouse_id");

                    b.ToTable("RowInfo");
                });

            modelBuilder.Entity("XMX.WMS.SlotInfo.SlotInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("slot_area_id");

                    b.Property<int>("slot_closed_status");

                    b.Property<string>("slot_code");

                    b.Property<int>("slot_column");

                    b.Property<int>("slot_exp_status");

                    b.Property<int>("slot_imp_status");

                    b.Property<int>("slot_is_enable");

                    b.Property<int>("slot_layer");

                    b.Property<int>("slot_moveable_status");

                    b.Property<string>("slot_name");

                    b.Property<int>("slot_row");

                    b.Property<Guid?>("slot_row_id");

                    b.Property<Guid?>("slot_size_level");

                    b.Property<int>("slot_stock_status");

                    b.Property<Guid?>("slot_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("slot_area_id");

                    b.HasIndex("slot_row_id");

                    b.HasIndex("slot_size_level");

                    b.HasIndex("slot_warehouse_id");

                    b.ToTable("SlotInfo");
                });

            modelBuilder.Entity("XMX.WMS.SlotSize.SlotSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("size_company_id");

                    b.Property<decimal>("size_height");

                    b.Property<int>("size_is_enable");

                    b.Property<decimal>("size_length");

                    b.Property<string>("size_name");

                    b.Property<string>("size_remark");

                    b.Property<Guid?>("size_warehouse_id");

                    b.Property<decimal>("size_width");

                    b.HasKey("Id");

                    b.HasIndex("size_company_id");

                    b.HasIndex("size_warehouse_id");

                    b.ToTable("SlotSize");
                });

            modelBuilder.Entity("XMX.WMS.StockTasking.StockTasking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("task_code");

                    b.Property<Guid?>("task_company_id");

                    b.Property<decimal>("task_count");

                    b.Property<DateTime?>("task_end_date");

                    b.Property<Guid?>("task_goods_id");

                    b.Property<string>("task_operate_person");

                    b.Property<DateTime>("task_operate_time");

                    b.Property<string>("task_remark");

                    b.Property<DateTime?>("task_start_date");

                    b.Property<int>("task_state");

                    b.Property<int>("task_type");

                    b.Property<Guid?>("task_warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("task_company_id");

                    b.HasIndex("task_goods_id");

                    b.HasIndex("task_warehouse_id");

                    b.ToTable("StockTasking");
                });

            modelBuilder.Entity("XMX.WMS.StockTaskingDetail.StockTaskingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("stock_tasking_id");

                    b.Property<decimal>("task_acount");

                    b.Property<string>("task_batch_no");

                    b.Property<Guid?>("task_company_id");

                    b.Property<decimal>("task_count");

                    b.Property<decimal>("task_dcount");

                    b.Property<Guid?>("task_goods_id");

                    b.Property<string>("task_operate_person");

                    b.Property<DateTime>("task_operate_time");

                    b.Property<Guid?>("task_slot_id");

                    b.Property<int>("task_state");

                    b.Property<string>("task_stock_code");

                    b.HasKey("Id");

                    b.HasIndex("stock_tasking_id");

                    b.HasIndex("task_company_id");

                    b.HasIndex("task_goods_id");

                    b.HasIndex("task_slot_id");

                    b.ToTable("StockTaskingDetail");
                });

            modelBuilder.Entity("XMX.WMS.StrategyDistribution.StrategyDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("distribution_company_id");

                    b.Property<int>("distribution_fefo");

                    b.Property<int>("distribution_fefo_priority");

                    b.Property<int>("distribution_is_enable");

                    b.Property<string>("distribution_name");

                    b.Property<int>("distribution_order");

                    b.Property<int>("distribution_order_priority");

                    b.Property<string>("distribution_remark");

                    b.Property<int>("distribution_unpack");

                    b.Property<int>("distribution_unpack_priority");

                    b.HasKey("Id");

                    b.HasIndex("distribution_company_id");

                    b.ToTable("StrategyDistribution");
                });

            modelBuilder.Entity("XMX.WMS.StrategyMonitor.StrategyMonitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("monitor_company_id");

                    b.Property<int>("monitor_days_max");

                    b.Property<int>("monitor_expired_days");

                    b.Property<int>("monitor_is_enable");

                    b.Property<string>("monitor_name");

                    b.Property<int>("monitor_recheck_days");

                    b.Property<string>("monitor_remark");

                    b.Property<int>("monitor_stock_max");

                    b.Property<int>("monitor_stock_min");

                    b.HasKey("Id");

                    b.HasIndex("monitor_company_id");

                    b.ToTable("StrategyMonitor");
                });

            modelBuilder.Entity("XMX.WMS.StrategyWarehousing.StrategyWarehousing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("warehousing_buzy");

                    b.Property<int>("warehousing_buzy_priority");

                    b.Property<Guid?>("warehousing_company_id");

                    b.Property<int>("warehousing_is_enable");

                    b.Property<string>("warehousing_name");

                    b.Property<string>("warehousing_remark");

                    b.Property<int>("warehousing_select");

                    b.Property<int>("warehousing_select_priority");

                    b.HasKey("Id");

                    b.HasIndex("warehousing_company_id");

                    b.ToTable("StrategyWarehousing");
                });

            modelBuilder.Entity("XMX.WMS.SystemMenuInfo.SystemMenuInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("menu_function_name");

                    b.Property<string>("menu_icon");

                    b.Property<int>("menu_is_enable");

                    b.Property<int>("menu_order");

                    b.Property<Guid?>("menu_parent_id");

                    b.Property<string>("menu_remark");

                    b.Property<int>("menu_type");

                    b.Property<string>("menu_url");

                    b.HasKey("Id");

                    b.HasIndex("menu_parent_id");

                    b.ToTable("SystemMenuInfo");
                });

            modelBuilder.Entity("XMX.WMS.TaskMainInfo.TaskMainInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("main_company_id");

                    b.Property<int>("main_execute_flag");

                    b.Property<Guid?>("main_inslot_code");

                    b.Property<string>("main_malfunction");

                    b.Property<int>("main_manual_flag");

                    b.Property<int>("main_mode");

                    b.Property<string>("main_no");

                    b.Property<Guid?>("main_platform_id");

                    b.Property<Guid?>("main_port_id");

                    b.Property<Guid?>("main_port_id2");

                    b.Property<int>("main_priority");

                    b.Property<Guid?>("main_slot_code");

                    b.Property<string>("main_stock_code");

                    b.HasKey("Id");

                    b.HasIndex("main_company_id");

                    b.HasIndex("main_inslot_code");

                    b.HasIndex("main_platform_id");

                    b.HasIndex("main_port_id");

                    b.HasIndex("main_port_id2");

                    b.HasIndex("main_slot_code");

                    b.ToTable("TaskMainInfo");
                });

            modelBuilder.Entity("XMX.WMS.TunnelInfo.TunnelInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("slot_row_id");

                    b.Property<Guid?>("tunnel_company_id");

                    b.Property<int>("tunnel_in_state");

                    b.Property<int>("tunnel_is_enable");

                    b.Property<string>("tunnel_name");

                    b.Property<int>("tunnel_out_state");

                    b.HasKey("Id");

                    b.HasIndex("slot_row_id");

                    b.HasIndex("tunnel_company_id");

                    b.ToTable("TunnelInfo");
                });

            modelBuilder.Entity("XMX.WMS.TunnelPort.TunnelPort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("tunnelPort_company_id");

                    b.Property<Guid?>("tunnelPort_port_id");

                    b.Property<Guid?>("tunnelPort_tunnel_id");

                    b.HasKey("Id");

                    b.HasIndex("tunnelPort_company_id");

                    b.HasIndex("tunnelPort_port_id");

                    b.HasIndex("tunnelPort_tunnel_id");

                    b.ToTable("TunnelPort");
                });

            modelBuilder.Entity("XMX.WMS.UnitInfo.UnitInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("unit_company_id");

                    b.Property<int>("unit_is_enable");

                    b.Property<string>("unit_name");

                    b.HasKey("Id");

                    b.HasIndex("unit_company_id");

                    b.ToTable("UnitInfo");
                });

            modelBuilder.Entity("XMX.WMS.WarehouseInfo.WarehouseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("warehouse_code");

                    b.Property<Guid?>("warehouse_company_id");

                    b.Property<int>("warehouse_is_enable");

                    b.Property<string>("warehouse_name");

                    b.Property<string>("warehouse_remark");

                    b.Property<int>("warehouse_slot_type");

                    b.Property<int>("warehouse_type");

                    b.HasKey("Id");

                    b.HasIndex("warehouse_company_id");

                    b.ToTable("WarehouseInfo");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("XMX.WMS.Alarm.Alarm", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("goods_id");

                    b.HasOne("XMX.WMS.InventoryInfo.InventoryInfo", "Inventory")
                        .WithMany()
                        .HasForeignKey("inventory_id");

                    b.HasOne("XMX.WMS.StrategyMonitor.StrategyMonitor", "StrategyMonitor")
                        .WithMany()
                        .HasForeignKey("strategy_id");
                });

            modelBuilder.Entity("XMX.WMS.AreaInfo.AreaInfo", b =>
                {
                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("area_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.Authorization.Roles.Role", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("XMX.WMS.Authorization.Users.User", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("XMX.WMS.DepartmentInfo.DepartmentInfo", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("XMX.WMS.BillInfo.BillInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("bill_company_id");

                    b.HasOne("XMX.WMS.EncodingRule.EncodingRule", "EncodingRule")
                        .WithMany()
                        .HasForeignKey("bill_rule_id");
                });

            modelBuilder.Entity("XMX.WMS.CompanyInfo.CompanyInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("XMX.WMS.CustomInfo.CustomInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("custom_company_id");

                    b.HasOne("XMX.WMS.CustomTypeInfo.CustomTypeInfo", "CustomType")
                        .WithMany()
                        .HasForeignKey("custom_type_id");
                });

            modelBuilder.Entity("XMX.WMS.CustomTypeInfo.CustomTypeInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("customtype_company_id");
                });

            modelBuilder.Entity("XMX.WMS.DepartmentInfo.DepartmentInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("XMX.WMS.DepartmentInfo.DepartmentInfo", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("XMX.WMS.EncodingRule.EncodingRule", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("code_company_id");
                });

            modelBuilder.Entity("XMX.WMS.Equipment.RGVInfo", b =>
                {
                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("rgv_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.Equipment.StackerInfo", b =>
                {
                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("stacker_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.ExportBillbody.ExportBillbody", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("expbody_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("expbody_goods_id");

                    b.HasOne("XMX.WMS.ExportBillhead.ExportBillhead", "ExportBillhead")
                        .WithMany()
                        .HasForeignKey("expbody_imphead_id");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "Quality")
                        .WithMany()
                        .HasForeignKey("expbody_quality_status");
                });

            modelBuilder.Entity("XMX.WMS.ExportBillhead.ExportBillhead", b =>
                {
                    b.HasOne("XMX.WMS.BillInfo.BillInfo", "Bill")
                        .WithMany()
                        .HasForeignKey("exphead_bill_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("exphead_company_id");

                    b.HasOne("XMX.WMS.CustomInfo.CustomInfo", "Custom")
                        .WithMany()
                        .HasForeignKey("exphead_custom_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("exphead_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.ExportConfirm.ExportConfirm", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("confirm_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("confirm_goods_id");

                    b.HasOne("XMX.WMS.PlatFormInfo.PlatFormInfo", "PlatForm")
                        .WithMany()
                        .HasForeignKey("confirm_platform_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("confirm_port_id");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "Quality")
                        .WithMany()
                        .HasForeignKey("confirm_quality_status");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("confirm_slot_code");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("confirm_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.ExportOrder.ExportOrder", b =>
                {
                    b.HasOne("XMX.WMS.ExportBillbody.ExportBillbody", "ExportBillbody")
                        .WithMany()
                        .HasForeignKey("exporder_body_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("exporder_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("exporder_goods_id");

                    b.HasOne("XMX.WMS.PlatFormInfo.PlatFormInfo", "PlatForm")
                        .WithMany()
                        .HasForeignKey("exporder_platform_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("exporder_port_id");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "Quality")
                        .WithMany()
                        .HasForeignKey("exporder_quality_status");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("exporder_slot_code");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("exporder_warehouse_id");

                    b.HasOne("XMX.WMS.HistoryTaskMainInfo.HistoryTaskMainInfo", "HistoryTask")
                        .WithMany()
                        .HasForeignKey("history_task_id");

                    b.HasOne("XMX.WMS.TaskMainInfo.TaskMainInfo", "Task")
                        .WithMany()
                        .HasForeignKey("task_id");
                });

            modelBuilder.Entity("XMX.WMS.ExportStock.ExportStock", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("expstock_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("expstock_goods_id");

                    b.HasOne("XMX.WMS.PlatFormInfo.PlatFormInfo", "PlatForm")
                        .WithMany()
                        .HasForeignKey("expstock_platform_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("expstock_port_id");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("expstock_slot_code");

                    b.HasOne("XMX.WMS.TaskMainInfo.TaskMainInfo", "Task")
                        .WithMany()
                        .HasForeignKey("expstock_task_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("expstock_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.GoodsInfo.GoodsInfo", b =>
                {
                    b.HasOne("XMX.WMS.AreaInfo.AreaInfo", "Area")
                        .WithMany()
                        .HasForeignKey("goods_area_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("goods_company_id");

                    b.HasOne("XMX.WMS.StrategyDistribution.StrategyDistribution", "StrategyDistribution")
                        .WithMany()
                        .HasForeignKey("goods_distribution_id");

                    b.HasOne("XMX.WMS.StrategyMonitor.StrategyMonitor", "StrategyMonitor")
                        .WithMany()
                        .HasForeignKey("goods_monitor_id");

                    b.HasOne("XMX.WMS.PackInfo.PackInfo", "Pack")
                        .WithMany()
                        .HasForeignKey("goods_pack_id");

                    b.HasOne("XMX.WMS.UnitInfo.UnitInfo", "Unit")
                        .WithMany()
                        .HasForeignKey("goods_unit");

                    b.HasOne("XMX.WMS.UnitInfo.UnitInfo", "Unit2")
                        .WithMany()
                        .HasForeignKey("goods_unit2");

                    b.HasOne("XMX.WMS.StrategyWarehousing.StrategyWarehousing", "StrategyWarehousing")
                        .WithMany()
                        .HasForeignKey("goods_warehousing_id");
                });

            modelBuilder.Entity("XMX.WMS.HistoryTaskMainInfo.HistoryTaskMainInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "company")
                        .WithMany()
                        .HasForeignKey("main_company_id");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot2")
                        .WithMany()
                        .HasForeignKey("main_inslot_code");

                    b.HasOne("XMX.WMS.PlatFormInfo.PlatFormInfo", "PlatForm")
                        .WithMany()
                        .HasForeignKey("main_platform_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port1")
                        .WithMany()
                        .HasForeignKey("main_port_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port2")
                        .WithMany()
                        .HasForeignKey("main_port_id2");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot1")
                        .WithMany()
                        .HasForeignKey("main_slot_code");
                });

            modelBuilder.Entity("XMX.WMS.ImportBillbody.ImportBillbody", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("impbody_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "GoodsInfo")
                        .WithMany()
                        .HasForeignKey("impbody_goods_id");

                    b.HasOne("XMX.WMS.ImportBillhead.ImportBillhead", "ImportBillhead")
                        .WithMany()
                        .HasForeignKey("impbody_imphead_id");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "QualityInfo")
                        .WithMany()
                        .HasForeignKey("impbody_quality_status");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "UploadQualityInfo")
                        .WithMany()
                        .HasForeignKey("impbody_upload_quantity");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "WarehouseInfo")
                        .WithMany()
                        .HasForeignKey("impbody_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.ImportBillhead.ImportBillhead", b =>
                {
                    b.HasOne("XMX.WMS.BillInfo.BillInfo", "BillInfo")
                        .WithMany()
                        .HasForeignKey("imphead_bill_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("imphead_company_id");

                    b.HasOne("XMX.WMS.CustomInfo.CustomInfo", "CustomInfo")
                        .WithMany()
                        .HasForeignKey("imphead_custom_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "WarehouseInfo")
                        .WithMany()
                        .HasForeignKey("imphead_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.ImportOrder.ImportOrder", b =>
                {
                    b.HasOne("XMX.WMS.HistoryTaskMainInfo.HistoryTaskMainInfo", "HistoryTask")
                        .WithMany()
                        .HasForeignKey("history_task_id");

                    b.HasOne("XMX.WMS.ImportBillbody.ImportBillbody", "ImportBillbody")
                        .WithMany()
                        .HasForeignKey("imporder_body_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("imporder_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("imporder_goods_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("imporder_port_id");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "QualityInfo")
                        .WithMany()
                        .HasForeignKey("imporder_quality_status");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("imporder_slot_code");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("imporder_warehouse_id");

                    b.HasOne("XMX.WMS.TaskMainInfo.TaskMainInfo", "Task")
                        .WithMany()
                        .HasForeignKey("task_id");
                });

            modelBuilder.Entity("XMX.WMS.ImportStock.ImportStock", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("impstock_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("impstock_goods_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("impstock_port_id");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("impstock_slot_code");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("impstock_warehouse_id");

                    b.HasOne("XMX.WMS.TaskMainInfo.TaskMainInfo", "Task")
                        .WithMany()
                        .HasForeignKey("task_id");
                });

            modelBuilder.Entity("XMX.WMS.InventoryInfo.InventoryInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("inventory_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("inventory_goods_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("inventory_port_id");

                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "Quality")
                        .WithMany()
                        .HasForeignKey("inventory_quality_status");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("inventory_slot_code")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("inventory_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("XMX.WMS.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("XMX.WMS.PackInfo.PackInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("pack_company_id");
                });

            modelBuilder.Entity("XMX.WMS.PlatFormInfo.PlatFormInfo", b =>
                {
                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("platform_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.PortInfo.PortInfo", b =>
                {
                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("port_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.QualityCheck.QualityCheck", b =>
                {
                    b.HasOne("XMX.WMS.InventoryInfo.InventoryInfo", "check_inventory_info")
                        .WithMany()
                        .HasForeignKey("check_inventory_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("inventory_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.QualityCheckDetail.QualityCheckDetail", b =>
                {
                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("inventory_goods_id");

                    b.HasOne("XMX.WMS.QualityCheck.QualityCheck", "qualityCheck")
                        .WithMany()
                        .HasForeignKey("quality_check_id");
                });

            modelBuilder.Entity("XMX.WMS.QualityInfo.QualityInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("quality_company_id");
                });

            modelBuilder.Entity("XMX.WMS.QualityReleased.QualityReleased", b =>
                {
                    b.HasOne("XMX.WMS.QualityInfo.QualityInfo", "quare_quality_info")
                        .WithMany()
                        .HasForeignKey("quare_quality_id");
                });

            modelBuilder.Entity("XMX.WMS.RowInfo.RowInfo", b =>
                {
                    b.HasOne("XMX.WMS.AreaInfo.AreaInfo", "Area")
                        .WithMany()
                        .HasForeignKey("row_area_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("row_company_id");

                    b.HasOne("XMX.WMS.RowInfo.RowInfo", "Row")
                        .WithMany()
                        .HasForeignKey("row_out_id");

                    b.HasOne("XMX.WMS.SlotSize.SlotSize", "Size")
                        .WithMany()
                        .HasForeignKey("row_size_id");

                    b.HasOne("XMX.WMS.TunnelInfo.TunnelInfo", "Tunnel")
                        .WithMany()
                        .HasForeignKey("row_tunnel_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("row_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.SlotInfo.SlotInfo", b =>
                {
                    b.HasOne("XMX.WMS.AreaInfo.AreaInfo", "Area")
                        .WithMany()
                        .HasForeignKey("slot_area_id");

                    b.HasOne("XMX.WMS.RowInfo.RowInfo", "Row")
                        .WithMany()
                        .HasForeignKey("slot_row_id");

                    b.HasOne("XMX.WMS.SlotSize.SlotSize", "Size")
                        .WithMany()
                        .HasForeignKey("slot_size_level");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("slot_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.SlotSize.SlotSize", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("size_company_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("size_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.StockTasking.StockTasking", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("task_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("task_goods_id");

                    b.HasOne("XMX.WMS.WarehouseInfo.WarehouseInfo", "Warehouse")
                        .WithMany()
                        .HasForeignKey("task_warehouse_id");
                });

            modelBuilder.Entity("XMX.WMS.StockTaskingDetail.StockTaskingDetail", b =>
                {
                    b.HasOne("XMX.WMS.StockTasking.StockTasking", "StockTasking")
                        .WithMany()
                        .HasForeignKey("stock_tasking_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("task_company_id");

                    b.HasOne("XMX.WMS.GoodsInfo.GoodsInfo", "Goods")
                        .WithMany()
                        .HasForeignKey("task_goods_id");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot")
                        .WithMany()
                        .HasForeignKey("task_slot_id");
                });

            modelBuilder.Entity("XMX.WMS.StrategyDistribution.StrategyDistribution", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("distribution_company_id");
                });

            modelBuilder.Entity("XMX.WMS.StrategyMonitor.StrategyMonitor", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("monitor_company_id");
                });

            modelBuilder.Entity("XMX.WMS.StrategyWarehousing.StrategyWarehousing", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("warehousing_company_id");
                });

            modelBuilder.Entity("XMX.WMS.SystemMenuInfo.SystemMenuInfo", b =>
                {
                    b.HasOne("XMX.WMS.SystemMenuInfo.SystemMenuInfo", "SystemMenu")
                        .WithMany()
                        .HasForeignKey("menu_parent_id");
                });

            modelBuilder.Entity("XMX.WMS.TaskMainInfo.TaskMainInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "company")
                        .WithMany()
                        .HasForeignKey("main_company_id");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot2")
                        .WithMany()
                        .HasForeignKey("main_inslot_code");

                    b.HasOne("XMX.WMS.PlatFormInfo.PlatFormInfo", "PlatForm")
                        .WithMany()
                        .HasForeignKey("main_platform_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port1")
                        .WithMany()
                        .HasForeignKey("main_port_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port2")
                        .WithMany()
                        .HasForeignKey("main_port_id2");

                    b.HasOne("XMX.WMS.SlotInfo.SlotInfo", "Slot1")
                        .WithMany()
                        .HasForeignKey("main_slot_code");
                });

            modelBuilder.Entity("XMX.WMS.TunnelInfo.TunnelInfo", b =>
                {
                    b.HasOne("XMX.WMS.RowInfo.RowInfo", "Row")
                        .WithMany()
                        .HasForeignKey("slot_row_id");

                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("tunnel_company_id");
                });

            modelBuilder.Entity("XMX.WMS.TunnelPort.TunnelPort", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("tunnelPort_company_id");

                    b.HasOne("XMX.WMS.PortInfo.PortInfo", "Port")
                        .WithMany()
                        .HasForeignKey("tunnelPort_port_id");

                    b.HasOne("XMX.WMS.TunnelInfo.TunnelInfo", "Tunnel")
                        .WithMany()
                        .HasForeignKey("tunnelPort_tunnel_id");
                });

            modelBuilder.Entity("XMX.WMS.UnitInfo.UnitInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("unit_company_id");
                });

            modelBuilder.Entity("XMX.WMS.WarehouseInfo.WarehouseInfo", b =>
                {
                    b.HasOne("XMX.WMS.CompanyInfo.CompanyInfo", "Company")
                        .WithMany()
                        .HasForeignKey("warehouse_company_id");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("XMX.WMS.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
