package com.xywg.admin.modular.zr.service;

import com.xywg.admin.modular.company.dao.SubContractorMapper;
import com.xywg.admin.modular.company.model.SubContractor;
import com.xywg.admin.modular.device.dao.DeviceMapper;
import com.xywg.admin.modular.device.model.Device;
import com.xywg.admin.modular.project.dao.ProjectMasterMapper;
import com.xywg.admin.modular.project.model.ProjectMaster;
import com.xywg.admin.modular.project.service.impl.ProjectMasterServiceImpl;
import com.xywg.admin.modular.worker.dao.WorkerMasterMapper;
import com.xywg.admin.modular.worker.model.WorkerMaster;
import com.xywg.admin.modular.zr.model.SmzZrRelationTpm;
import com.xywg.admin.modular.zr.model.ZrCompanyTpm;
import com.xywg.admin.modular.zr.model.ZrDeviceTpm;
import com.xywg.admin.modular.zr.model.ZrProjectTpm;
import com.xywg.admin.modular.zr.model.ZrUserTpm;
import com.xywg.admin.modular.zr.utils.HttpClientUtils;

import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

/**
 * @Description:
 * @Author jln
 */
@Service
public class ZrInterfaceServiceImpl implements IZrInterfaceService{

	@Autowired
	private SubContractorMapper subContractorMapper;

	@Autowired
	private ProjectMasterMapper projectMasterMapper;
	@Autowired
	private DeviceMapper deviceMapper;
	@Autowired
	private WorkerMasterMapper workerMasterMapper;
	
	private static final Log LOG = LogFactory.getLog(ProjectMasterServiceImpl.class);
    private static Properties systemParams = new Properties();
	/**
     * 加载配置文件
     */
    static {
        try {
            systemParams.load(ProjectMasterServiceImpl.class.getClassLoader().getResourceAsStream("zr.properties"));
        } catch (IOException e) {
            LOG.error("zr.properties" + "配置文件加载失败");
        }
    }

    /**
     * @param key
     * @return
     * @description 获取配置文件具体信息
     * @author jln
     */
    protected String getSystemStringParam(String key) {
        return systemParams.getProperty(key);
    }
	@Override
	public boolean SendCompanyInfo(String stoken) {
		//获取企业信息
		SubContractor company = this.subContractorMapper.getCompanyInfo();
		
		ZrCompanyTpm zrCompany = new ZrCompanyTpm();
		zrCompany.setFullName(company.getCompanyName());
		zrCompany.setSimpleName(company.getCompanyName());
		zrCompany.setRegistration(company.getAreaCode());
		zrCompany.setType(1);
		zrCompany.setCode(company.getOrganizationCode());
		zrCompany.setUserId("1");
		zrCompany.setLevel(1);
		zrCompany.setContact(company.getContactPeopleName());
		zrCompany.setContactPhone(company.getContactPeopleCellPhone());
		zrCompany.setDescription(company.getCompanyName());
		zrCompany.setRegisterCapital(Long.valueOf(50000));
		
		String json = JSONObject.fromObject(zrCompany).toString();
		String jsonResult = HttpClientUtils.sendPost(getSystemStringParam("httpUrlPrefix") + getSystemStringParam("SendCompanyInfo"), json, stoken);
		
		JSONObject obj = new JSONObject().fromObject(jsonResult);//将json字符串转换为json对象
		if("10000".equals(obj.getString("code"))){
			System.out.println(obj.getString("id"));
			return true;
		}else{
			return false;
		}
	}
	@Override
	public boolean SendProjectInfo(String stoken) {
		//获取项目信息
		List<ProjectMaster> project = this.projectMasterMapper.getZrProjectInfo();
		for(int i=0;i<project.size();i++){
			ZrProjectTpm zrProject = new ZrProjectTpm();
			zrProject.setName(project.get(i).getProjectName());
			zrProject.setContractNo(project.get(i).getContractNo());
			zrProject.setStatus(project.get(i));  //工程状态
			zrProject.setCompanyId("");
			//工程类型
			if(project.get(i).getProjectType() == 1) {
				zrProject.setType(Long.valueOf(1));
			}else if(project.get(i).getProjectType() == 2){
				zrProject.setType(Long.valueOf(4));
			}else if(project.get(i).getProjectType() == 3){
				zrProject.setType(Long.valueOf(5));
			}else if(project.get(i).getProjectType() == 4){
				zrProject.setType(Long.valueOf(6));
			}
			zrProject.setCost(project.get(0).getBuildingCost());  //工程造价
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	        //获取String类型的时间
	        String b = sdf.format(project.get(0).getStartDate());
	        String e = sdf.format(project.get(0).getCompleteDate());
			zrProject.setStartTime(b);
			zrProject.setEndTime(e);
			zrProject.setCivilSite(Integer.valueOf(project.get(i).getIsCivilization()));
			zrProject.setQuality(Integer.valueOf(project.get(i).getIsHighGrade()));
			zrProject.setInvestType(3);  //投资类型
			zrProject.setConstruction(project.get(0).getOwnerName());  //建设单位名称
			zrProject.setBank(project.get(0).getBankName());
			zrProject.setAccount(project.get(0).getPayAccount());
			zrProject.setDescription(project.get(i).getProjectDescription());
			zrProject.setAreaCode(Long.valueOf(project.get(i).getAreaCode()));
			zrProject.setContractType("");  //承包类型
			zrProject.setAcreage(project.get(i).getBuildingArea());
			zrProject.setContact(project.get(0).getProjectManager());
			zrProject.setContactPhone(project.get(0).getProjectManagerPhone());
			
			String json = JSONObject.fromObject(zrProject).toString();
			System.out.println(json);
			String jsonResult = HttpClientUtils.sendPost(getSystemStringParam("httpUrlPrefix") + getSystemStringParam("SendProjectInfo"), json, stoken);
			System.out.println(jsonResult);
			JSONObject obj = new JSONObject().fromObject(jsonResult);//将json字符串转换为json对象
			if("10000".equals(obj.getString("code"))){
				System.out.println(obj.getString("id"));
			}else{
				System.out.println(obj.getString("msg"));
			}
		}
		return true;
	}
	@Override
	public boolean SendDeviceInfo(String stoken) {
		//获取考勤设备信息
		List<Device> device = this.deviceMapper.getZrDeviceInfo();
		for(int i=0;i<device.size();i++){
			
			ZrDeviceTpm zrDevice = new ZrDeviceTpm();
			zrDevice.setName(device.get(i).getName());
			zrDevice.setProjectId("");
			zrDevice.setSn(Long.valueOf(device.get(i).getSn()));
			zrDevice.setType(Long.valueOf(3));
			
			String json = JSONObject.fromObject(zrDevice).toString();
			
			String jsonResult = HttpClientUtils.sendPost(getSystemStringParam("httpUrlPrefix") + getSystemStringParam("SendDeviceInfo"), json, stoken);
			System.out.println(jsonResult);
			JSONObject obj = new JSONObject().fromObject(jsonResult);//将json字符串转换为json对象
			if("10000".equals(obj.getString("code"))){
				System.out.println(obj.getString("id"));
				//先根据实名制id查找是否有对应的中如id
				String old = this.deviceMapper.queryKey(device.get(i).getId(), "device");
				if(old == null){
					//将中如的设备id与我们这边的设备id对应，保存关系
					SmzZrRelationTpm r = new SmzZrRelationTpm();
					r.setLwtId(device.get(i).getId());
					r.setZrId(obj.getString("id"));
					r.setTableName("device");
					try{
						this.deviceMapper.addRelation(r);
					}catch(Exception e){
						e.getMessage();
					}
				}
			}else{
				System.out.println(obj.getString("msg"));
			}
		}
		return true;
		
	}
	@Override
	public boolean SendUserInfo(String stoken) {
		//获取人员信息
		List<WorkerMaster> user = this.workerMasterMapper.getZrUserInfo();
		for(int i=0;i<user.size();i++){
			ZrUserTpm zrUser = new ZrUserTpm();
			zrUser.setRealName(user.get(i).getWorkerName());
			zrUser.setGender(user.get(i).getGender());
			zrUser.setAreaId(Long.valueOf(user.get(i).getBirthPlaceCode()));
			SimpleDateFormat s = new SimpleDateFormat();
			String b = s.format(user.get(i).getBirthday())
			zrUser.setBirthday(b);
			zrUser.setIdNo(user.get(i).getUserId());
			zrUser.setNation(user.get(i).getNation());
			zrUser.setEdu(user.get(i).getCultureLevelType());
			zrUser.setPhone(Long.valueOf(user.get(i).getMobile()));
			zrUser.setMaritalStatus(3);
			zrUser.setTeam(user.get(i).getClassNo());
			if("1".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(2)); //木工
			}else if(("233".equals(user.get(i).getWorkKind())) || ("234".equals(user.get(i).getWorkKind())) || ("236".equals(user.get(i).getWorkKind()))){
				zrUser.setWorkTypeId(Long.valueOf(3));  //幕墙
			}else if("5".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(4));  //瓦工
			}else if("3".equals((user.get(i).getWorkKind())) || ("18".equals(user.get(i).getWorkKind())) || ("162".equals(user.get(i).getWorkKind())) || ("243".equals(user.get(i).getWorkKind()))){
				zrUser.setWorkTypeId(Long.valueOf(6));  //焊工
			}else if("20".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(7));  //电工
			}else if("7".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(8));  //水电工
			}else if("214".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(10));  //管道工
			}else if("441".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(11));  //钢筋工
			}else if("237".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(16));  //防水工
			}else if("16".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(23));  //油漆工
			}else if(("11".equals(user.get(i).getWorkKind())) || ("102".equals(user.get(i).getWorkKind())) || ("203".equals(user.get(i).getWorkKind()))){
				zrUser.setWorkTypeId(Long.valueOf(24));  //架子工
			}else if("17".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(54));  //普工
			}else if("231".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(32));  //装饰木工
			}else if("183".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(31));  //装饰瓦工
			}else if("10".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(33));  //塔吊司机
			}else if(("387".equals(user.get(i).getWorkKind())) || ("2".equals(user.get(i).getWorkKind()))){ //项目管理人员
				zrUser.setWorkTypeId(Long.valueOf(48));  //其他管理人员
			}else if("76".equals(user.get(i).getWorkKind())){
				zrUser.setWorkTypeId(Long.valueOf(99));  //其他
			}else{
				zrUser.setWorkTypeId(Long.valueOf(99));  //其他
			}
//					zrUser.setWorkTypeName(user.get(i).getWorkKindName());
			zrUser.setStatus("1");
			zrUser.setProjectId("bc2fd0f22b984cd7bee2d617cfdf0016");
			
			String json = JSONObject.fromObject(zrUser).toString();
			
			String url = "/projectMember/save";
			String jsonResult = HttpClientUtils.sendPost("http://ceshi.smzapi.zhuren360.com" + url, json, stoken);
			System.out.println(jsonResult);
			JSONObject obj = new JSONObject().fromObject(jsonResult);//将json字符串转换为json对象
			if("10000".equals(obj.getString("code"))){
				System.out.println(obj.getString("id"));
				//先根据实名制id查找是否有对应的中如id
				String old = this.deviceAsm.queryKey(user.get(i).getId(), "user");
				if(old == null){
					//将中如的人员id与我们这边的人员id对应，保存关系
					SmzZrRelationTpm r = new SmzZrRelationTpm();
					r.setSmzId(user.get(i).getId());
					r.setZrId(obj.getString("id"));
					r.setTableName("user");
					this.deviceAsm.addRelation(r);
				}
			}else{
				System.out.println(obj.getString("msg")+user.get(i).getUserId());
			}
		}
		return true;
		
	}
	@Override
	public boolean SendAttendance(String stoken) {
		//获取考勤信息
		List<RecordTpm> record = this.deviceAsm.getZrAttendance();
		for(int i=0;i<record.size();i++){
			ZrRecordTpm zrRecord = new ZrRecordTpm();
			//根据实名制id查找出中如考勤设备id
			String deviceId = this.deviceAsm.queryKey(record.get(i).getDevice().getId(),"device");
			if(deviceId != null){
				zrRecord.setDeviceId(deviceId.toString());
			}else{
				throw new Exception("没有对应的考勤设备"+record.get(i).getDevice().getId());
			}
			//根据实名制id查找中如人员id
			String userId = this.deviceAsm.queryKey(record.get(i).getUser().getId(), "user");
			if(userId != null){
				zrRecord.setProjectMemberId(userId.toString());
			}else{
				throw new Exception("没有对应的人员"+record.get(i).getUser().getId());
			}
			zrRecord.setType(Long.valueOf(record.get(i).getType()));
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        //获取String类型的时间
	        String ts = sdf.format(record.get(i).getTime());
			zrRecord.setTime(ts);
			zrRecord.setAddress("默认考勤地址");
			zrRecord.setPointX(null);
			zrRecord.setPointY(null);
			
			String json = JSONObject.fromObject(zrRecord).toString();
			String url = "/attendance/save";
			String jsonResult = HttpClientUtils.sendPost("http://ceshi.smzapi.zhuren360.com" + url, json, stoken);
			System.out.println(jsonResult);
			JSONObject obj = new JSONObject().fromObject(jsonResult);//将json字符串转换为json对象
			if("10000".equals(obj.getString("code"))){
				System.out.println(obj.getString("id"));
				//先根据实名制id查找是否有对应的中如id
				String old = this.deviceAsm.queryKey(record.get(i).getId(), "record");
				if(old == null){
					SmzZrRelationTpm r = new SmzZrRelationTpm();
					r.setSmzId(record.get(i).getId());
					r.setZrId(obj.getString("id"));
					r.setTableName("record");
					this.deviceAsm.addRelation(r);
				}
			}else{
				System.out.println(obj.getString("msg"));
			}
		}
		return true;
		
	}
	@Override
	public boolean SendInjuryInfo(String stoken) {
		//获取工伤信息
		List<InjuryTpm> injury = this.injuryAsm.getZrInjuryInfo();
		for(int i=0;i<injury.size();i++){
			ZrInjuryTpm zrInjury = new ZrInjuryTpm();
			//根据实名制id查找中如id
			String userId = this.deviceAsm.queryKey(injury.get(i).getUserId(), "user");
			if(userId != null){
				zrInjury.setProjectMemberId(userId.toString());
			}else{
				throw new Exception("没有对应的人员"+injury.get(i).getUserId());
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        //获取String类型的时间
	        String ts = sdf.format(injury.get(i).getInjuryDate());
			zrInjury.setOccurrenceTime(ts);
			zrInjury.setPlace(injury.get(i).getInjuryAddress());
			zrInjury.setMemo(injury.get(i).getInjuryMemo());
			zrInjury.setProjectId("bc2fd0f22b984cd7bee2d617cfdf0016");
			
			String json = JSONObject.fromObject(zrInjury).toString();
			String url = "/injury/save";
			String jsonResult = HttpClientUtils.sendPost("http://ceshi.smzapi.zhuren360.com" + url, json, stoken);
			System.out.println(jsonResult);
			JSONObject obj = new JSONObject().fromObject(jsonResult);//将json字符串转换为json对象
			if("10000".equals(obj.getString("code"))){
				System.out.println(obj.getString("id"));
			}else{
				System.out.println(obj.getString("msg"));
			}
		}
		return true;
		
	}
   
}
